// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  fullName     String?
  phoneNumber  String?
  password     String?
  avatar       String?
  dateOfBirth  DateTime?
  city         String?
  role         UserRole       @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Order        Order[]
  OrderHistory OrderHistory[]

  @@map("users")
}

model Order {
  id            String         @id @default(uuid())
  customer      User?          @relation(fields: [customerId], references: [id])
  customerId    String?
  tableNumber   String?
  totalAmount   Decimal        @db.Decimal(10, 2)
  orderType     OrderType      @default(DINE_IN)
  paymentStatus PaymentStatus  @default(PENDING)
  paymentMethod PaymentMethod  @default(CASH)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  OrderItem     OrderItem[]
  Voucher       Voucher?       @relation(fields: [voucherId], references: [id])
  voucherId     String?
  OrderHistory  OrderHistory[]
}

model OrderHistory {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  status      String
  note        String?
  createdAt   DateTime @default(now())
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)
}

model Product {
  id          String          @id @default(uuid())
  name        String
  price       Decimal         @db.Decimal(10, 2)
  image       String?
  isAvailable Boolean         @default(true)
  category    ProductCategory
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderItems  OrderItem[]
}

model Voucher {
  id            String       @id @default(uuid())
  name          String
  code          String       @unique
  discountType  DiscountType
  discountValue Decimal      @db.Decimal(10, 2)
  minimumAmount Decimal?     @db.Decimal(10, 2)
  maxUsage      Int?
  currentUsage  Int          @default(0)
  startDate     DateTime?
  endDate       DateTime?
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  orders        Order[]
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum UserRole {
  ADMIN
  CASHIER
  USER
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum ProductCategory {
  COFFEE
  MILK
  TEA
  FOOD
  SNACK
  BUNDLE
}

enum PaymentMethod {
  CASH
  QRIS
}
