generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  fullName         String?
  phoneNumber      String?
  password         String?
  avatar           String?
  dateOfBirth      DateTime?
  status           UserStatus @default(ACTIVE)
  city             String?
  role             UserRole   @default(USER)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  ordersAsCustomer Order[]    @relation("CustomerRelation")
  ordersAsCashier  Order[]    @relation("CashierRelation")

  @@map("users")
}

model Order {
  id String @id @default(uuid())

  Customer   User?   @relation("CustomerRelation", fields: [customerId], references: [id])
  customerId String?

  Cashier   User?   @relation("CashierRelation", fields: [cashierId], references: [id])
  cashierId String?

  orderChannel OrderChannel @default(ONLINE)
  tableNumber  String?
  notes        String?

  // PRICE CATEGORY
  discountAmount Decimal? @db.Decimal(10, 2)
  taxRate        Decimal? @default(10) @db.Decimal(5, 2)
  taxAmount      Decimal? @db.Decimal(10, 2)
  totalAmount    Decimal  @db.Decimal(10, 2)
  subTotalAmount Decimal? @db.Decimal(10, 2)

  // QRIS PAYMENT
  midtransOrderId        String?   @unique
  qrisMidtransUrl        String?   @unique
  expiredQrisMidtransUrl DateTime?

  // Cash Payment
  internalQrCode        String?   @unique
  expiredInternalQrCode DateTime?

  // STATUS & TYPE
  orderStatus   OrderStatus   @default(DRAFT)
  orderType     OrderType     @default(DINE_IN)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod @default(CASH)

  OrderItem    OrderItem[]
  Voucher      Voucher?       @relation(fields: [voucherId], references: [id])
  voucherId    String?
  OrderHistory OrderHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

model OrderHistory {
  id          String      @id @default(uuid())
  Order       Order       @relation(fields: [orderId], references: [id])
  orderId     String
  orderStatus OrderStatus
  createdAt   DateTime    @default(now())

  @@map("order_history")
}

model OrderItem {
  id       String  @id @default(uuid())
  Order    Order   @relation(fields: [orderId], references: [id])
  orderId  String
  quantity Int
  subtotal Decimal @db.Decimal(10, 2)

  Product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?

  // PRODUCT COPY WHEN DELETED
  productName     String
  productPrice    Decimal         @db.Decimal(10, 2)
  productImage    String?
  productCategory ProductCategory @default(COFFEE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model Product {
  id          String          @id @default(uuid())
  name        String
  description String?
  price       Decimal         @db.Decimal(10, 2)
  image       String?
  isAvailable Boolean         @default(true)
  category    ProductCategory
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  OrderItem   OrderItem[]

  @@map("products")
}

model Voucher {
  id            String        @id @default(uuid())
  name          String
  code          String        @unique
  description   String?
  discountType  DiscountType  @default(PERCENTAGE)
  discountValue Decimal       @db.Decimal(10, 2)
  minimumAmount Decimal?      @default(20000) @db.Decimal(10, 2)
  maximumAmount Decimal?      @default(25000) @db.Decimal(10, 2)
  maxUsage      Int?
  currentUsage  Int           @default(0)
  status        VoucherStatus @default(ACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  orders        Order[]

  @@map("vouchers")
}

enum VoucherStatus {
  ACTIVE
  SCHEDULED
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum UserRole {
  ADMIN
  CASHIER
  USER
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum ProductCategory {
  COFFEE
  MILK
  TEA
  FOOD
  SNACK
  BUNDLE
}

enum PaymentMethod {
  CASH
  QRIS
}

enum OrderChannel {
  ONLINE
  CASHIER
}

enum OrderStatus {
  COMPLETED
  INPROGRESS
  OPENBILL
  CANCELED
  DRAFT
}
